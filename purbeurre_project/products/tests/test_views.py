from unittest.mock import Mock, patch
from django.test import TestCase, SimpleTestCase
from django.urls import reverse, resolve
from products import views
from django.test import Client
from products.models import Product, Category
from django.contrib.auth.models import User

# from .mock import OPENFF_REQUEST

class Test404(SimpleTestCase):

    def test_404_view(self):
        response = self.client.get('/false_URL')
        # test status code
        self.assertEqual(response.status_code, 404)
        # test if good template is used
        self.assertEqual(response.templates[0].name, '404.html')

class TestViews(TestCase):

    @classmethod  # <- setUpTestData must be a class method
    def setUpTestData(cls):
        cls.client = Client()
        # create one category for all products created
        Category.objects.create(
            id="fruits:fr",
            name="Fruits frais")
        cls.category = Category.objects.get(id="fruits:fr")
        # create 15 products
        for i in range(15):
            Product.objects.create(
                name="prod"+str(i),
                code=str(i),
                nutritionGrade='b',
                category=cls.category)
        cls.prod1 = Product.objects.get(code=1)
        cls.user1 = User.objects.create_user('user1name', 'user1@email.com', 'user1password')

    def setUp(self):
        pass

    #########################
    #     TEST INDEX        #
    #########################

    def test_index_url_resolves(self):
        ''' products:index url call views.index '''
        self.client.login(username='user1name', password='user1password')
        url = reverse('products:index')
        # Compare name of functions because 
        # functions generated by as_view()
        # won't be equal due to different object ids
        self.assertIs(
            resolve(url).func.__name__,
            views.FavouritesView.as_view().__name__)
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        # Check our user is logged in
        self.assertEqual(str(response.context['user']), 'user1name')

    #########################
    #     TEST SEARCH       #
    #########################
    def test_search_resolves(self):
        response = self.client.get(reverse('products:search'), data={'q': self.prod1.name})
        # Test if page found
        self.assertEqual(response.status_code, 200)
        # Test if response contains product searched
        self.assertContains(response, 'Prod1')

    def test_search_template(self):
        response = self.client.get(reverse('products:search'), data={'q': self.prod1.name})
        self.assertTemplateUsed(response, 'products/product_list.html')

    #########################
    #    TEST COMPARE       #
    #########################
    def test_compare_resolves(self):
        response = self.client.get(
            reverse('products:compare', args=[self.category.id]),
            data={'code': self.prod1.code})
        # Test if page found
        self.assertEqual(response.status_code, 200)
        # Test if response contains product searched
        self.assertContains(response, 'Prod1')

    def test_pagination_is_twelve(self):
        response = self.client.get(
            reverse('products:compare', args=[self.category.id]),
            data={'code': self.prod1.code})
        self.assertEqual(response.status_code, 200)
        self.assertTrue('is_paginated' in response.context)
        self.assertTrue(response.context['is_paginated'] == True)
        self.assertTrue(len(response.context['product_list']) == 12)

    def test_lists_all_candidates(self):
        # Get second page and confirm it has 
        # exactly remaining (15-1-12=2) items
        response = self.client.get(
            reverse('products:compare', args=[self.category.id]),
            data={'code': self.prod1.code, 'page': 2})
        self.assertEqual(response.status_code, 200)
        self.assertTrue('is_paginated' in response.context)
        self.assertTrue(response.context['is_paginated'] == True)
        self.assertTrue(len(response.context['product_list']) == 2)

    #########################
    #     TEST DETAIL       #
    #########################
    def test_detail_url_resolves(self):
        ''' products:index url call views.index '''
        url = reverse('products:detail', args=[5])
        response = self.client.get(url)
        # Test function used
        self.assertIs(
            resolve(url).func.__name__,
            views.ProductDetailView.as_view().__name__)
        # Test template used
        self.assertTemplateUsed(response, 'products/product_detail.html')

    #########################
    #    TEST SAVE          #
    #########################
    def test_save_url_resolves(self):
        pass

    def test_404_if_not_saved(self):
        pass

    def test_save_redirection(self):
        pass

    #########################
    #    TEST DELETE        #
    #########################
    def test_delete_url_resolves(self):
        pass

    def test_404_if_not_delete(self):
        pass

    def test_delete_redirection(self):
        pass

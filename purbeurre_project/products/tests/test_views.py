from unittest.mock import Mock, patch, MagicMock
from django.test import TestCase, SimpleTestCase, RequestFactory, Client
from django.urls import reverse, resolve
from django.contrib.auth.models import User, AnonymousUser
from products import views, models
from products.models import Product, Category, ProductManager

# from .mock import OPENFF_REQUEST

class Test404(SimpleTestCase):

    def test_404_view(self):
        response = self.client.get('/false_URL')
        # User open a wrong url
        self.assertEqual(response.status_code, 404)
        # a template is dedicated for that
        self.assertEqual(response.templates[0].name, '404.html')

class TestViews(TestCase):

    @classmethod  # <- setUpTestData must be a class method
    def setUpTestData(cls):
        # create one category for all products created
        Category.objects.create(
            id="fruits:fr",
            name="Fruits frais")
        cls.category = Category.objects.get(id="fruits:fr")
        # create 15 products
        for i in range(15):
            Product.objects.create(
                name="prod"+str(i),
                code=str(i),
                nutritionGrade='b',
                category=cls.category)
        cls.prod1 = Product.objects.get(code=1)
        cls.user1 = User.objects.create_user('user1name', 'user1@email.com', 'user1password')
        cls.prodperso = Product(code='1234', name='toto')

    def setUp(self):
        self.factory = RequestFactory()


    # @patch('products.models.Product.objects.similar')
    def test_ProductsView(self):
        m_queryset = Mock(models.ProductManager.similar)
        m_queryset.return_value = [self.prodperso]
        # Call the service, which will send a request to the server.
        url = reverse('products:search')
        response = self.client.get(url, data={'q': self.prodperso.name})
        # import pdb
        # pdb.set_trace()
        self.assertContains(response, 'Toto')

    #########################
    #     TEST INDEX        #
    #########################

    def test_index_url_resolves(self):
        ''' products:index url call views.index '''
        self.client.login(username='user1name', password='user1password')
        url = reverse('products:index')
        # Compare name of functions because 
        # functions generated by as_view()
        # won't be equal due to different object ids
        self.assertIs(
            resolve(url).func.__name__,
            views.FavouritesView.as_view().__name__)
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        # Check our user is logged in
        self.assertEqual(str(response.context['user']), 'user1name')
        self.assertTemplateUsed(response, 'products/favourites_list.html')

    def test_anonymousUser_open_index(self):
        # Someone tries to open products index
        url = reverse('products:index')
        webpage = self.client.get(url)
        # import pdb;
        # pdb.set_trace()
        # dir(webpage)

        # As an anonymousUser
        self.assertEqual(
            webpage.context,
            None)
        # And get redirected to login
        self.assertRedirects(
            webpage,
            reverse('login')+'?next='+url,
            status_code=302,
            target_status_code=200)


    #########################
    #     TEST SEARCH       #
    #########################
    def test_search(self):
        url = reverse('products:search')
        response = self.client.get(url, data={'q': self.prod1.name})
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'products/product_list.html')
        # Test if response contains product searched
        self.assertContains(response, 'Prod1')

    #########################
    #    TEST COMPARE       #
    #########################
    def test_compare_resolves(self):
        url = reverse(
            'products:compare',
            args=[self.category.id])
        response = self.client.get(
            url,
            data={'code': self.prod1.code})
        self.assertEqual(response.status_code, 200)
        # Test if response contains product searched
        self.assertContains(response, 'Prod1')

    def test_pagination_is_twelve(self):
        url = reverse(
            'products:compare',
            args=[self.category.id])
        response = self.client.get(
            url,
            data={'code': self.prod1.code})
        self.assertEqual(response.status_code, 200)
        self.assertTrue('is_paginated' in response.context)
        self.assertTrue(response.context['is_paginated'] == True)
        self.assertTrue(len(response.context['product_list']) == 12)

    def test_lists_all_candidates(self):
        # Get second page and confirm it has 
        # exactly remaining (15-1-12=2) items
        url = reverse('products:compare', args=[self.category.id])
        response = self.client.get(
            url,
            data={'code': self.prod1.code, 'page': 2})
        self.assertEqual(response.status_code, 200)
        self.assertTrue('is_paginated' in response.context)
        self.assertTrue(response.context['is_paginated'] == True)
        self.assertTrue(len(response.context['product_list']) == 2)

    #########################
    #     TEST DETAIL       #
    #########################
    def test_detail_url_resolves(self):
        ''' products:index url call views.index '''
        url = reverse('products:detail', args=[5])
        response = self.client.get(url)
        # Test function used
        self.assertIs(
            resolve(url).func.__name__,
            views.ProductDetailView.as_view().__name__)
        # Test template used
        self.assertTemplateUsed(response, 'products/product_detail.html')

    #########################
    #    TEST SAVE          #
    #########################
    def test_save_url_resolves(self):
        pass

    def test_404_if_not_saved(self):
        pass

    def test_save_redirection(self):
        pass

    #########################
    #    TEST DELETE        #
    #########################
    def test_delete_url_resolves(self):
        pass

    def test_404_if_not_delete(self):
        pass

    def test_delete_redirection(self):
        pass
